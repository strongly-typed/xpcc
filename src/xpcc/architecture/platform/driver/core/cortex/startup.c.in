// coding: utf-8
/* Copyright (c) 2013-2016, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

%# Include Target Specific Files
%% import 'platform.macros' as platform with context

%# This dictionary contains the devices interrupt table
%% set i = {}
%# Generate Cortex Interrupts
%% if target is cortex_m3 or target is cortex_m4 or target is cortex_m7
%% 	do i.update({-12:  ["MemManage_Handler", "MPU Fault Handler"]})
%% 	do i.update({-11:  ["BusFault_Handler", "Bus Fault Handler"]})
%% 	do i.update({-10:  ["UsageFault_Handler", "Usage Fault Handler"]})
%% 	do i.update({ -4: ["DebugMon_Handler", "Debug Monitor Handler"]})
%% endif
%% do i.update({-5: ["SVC_Handler", "SVCall Handler"]})
%% do i.update({-2: ["PendSV_Handler", "PendSV Handler"]})
%% do i.update({-1: ["SysTick_Handler", "SysTick Handler"]})
%% for vector in vectors
%%  do i.update({(vector.position | int) : [vector.name, ""]})
%% endfor

%# Count Interrupts
%% set number_of_interrupts = i.keys() | sort | last

#include <stdint.h>
#include <xpcc/architecture/utils.hpp>
#include <xpcc/architecture/interface/assert.h>
#include "../../../device.hpp"
#include "xpcc_config.hpp"

{{ platform.defines() }}

// ----------------------------------------------------------------------------
void Undefined_Handler(void)
{
	uint32_t irqn;
	asm volatile("mrs %[irqn], ipsr" :[irqn] "=r" (irqn));
	xpcc_assert(0, "core", "nvic", "undefined", irqn);
}
/* Provide weak aliases for each Exception handler to Undefined_Handler.
 * As they are weak aliases, any function with the same name will override
 * this definition. */
void Reset_Handler(void)				__attribute__((noreturn));
void NMI_Handler(void)					__attribute__((weak, alias("Undefined_Handler")));
%% if target is stm32
void HardFault_Handler(void);
%% else
void HardFault_Handler(void)			__attribute__((weak, alias("Undefined_Handler")));
%% endif
%# Remember declarations to avoid redeclarations
%% set declarations = []
%% for addr, interrupt in i.items()
%% 	if interrupt[0] not in declarations
%%		do declarations.append(interrupt[0])
%%		set suffix = "_IRQHandler"
%%		if addr < 0
%%			set suffix = ""
%%		endif
{{ ("void " + interrupt[0] + suffix + "(void)") | xpcc.pad(36)}}__attribute__((weak, alias("Undefined_Handler")));
%%	endif
%% endfor
// ----------------------------------------------------------------------------
// Interrupt vectors
typedef void (* const FunctionPointer)(void);

// defined in the linkerscript
extern uint32_t __main_stack_top[];
extern uint32_t __process_stack_top[];

%% if parameters.vector_table_in_ram
// reserve space for the remapped vector table in RAM
xpcc_section(".vectors")
FunctionPointer ramVectors[{{number_of_interrupts + 16}}];
%% endif
// Define the vector table
xpcc_section(".reset")
FunctionPointer flashVectors[] =
{
	(FunctionPointer)__main_stack_top,		// -16: stack pointer
	Reset_Handler,							// -15: code entry point
	NMI_Handler,							// -14: Non Maskable Interrupt handler
	HardFault_Handler,						// -13: hard fault handler
%% for addr in range(4 - 16, number_of_interrupts + 1)
%% 	if addr in i
%%		set suffix = "_IRQHandler"
%%		if addr < 0
%%			set suffix = ""
%%		endif
	{{ (i[addr][0] + suffix + ",") | xpcc.pad(36) }}// {{ (addr|string).rjust(3) }}
%% 	else
	Undefined_Handler,						// {{ (addr|string).rjust(3) }}
%% 	endif
%% endfor
};

// ----------------------------------------------------------------------------
// The following are constructs created by the linker, indicating where the
// the "data" and "bss" segments reside in memory.
extern uint32_t __stack_start[];
extern uint32_t __stack_end[];

extern uint32_t __table_copy_intern_start[];
extern uint32_t __table_copy_intern_end[];

extern uint32_t __table_zero_intern_start[];
extern uint32_t __table_zero_intern_end[];

extern uint32_t __table_copy_extern_start[];
extern uint32_t __table_copy_extern_end[];

extern uint32_t __table_zero_extern_start[];
extern uint32_t __table_zero_extern_end[];

extern uint32_t __vector_table_rom_start[];
extern uint32_t __vector_table_ram_start[];

// Application's main function
int __attribute__((noreturn))
main(void);

// calls CTORS of static objects
void
__libc_init_array(void);

// default implementation is empty and does nothing
xpcc_weak void
xpcc_hook_hardware_init(void) {}

extern void
__xpcc_initialize_memory(void);

%% if parameters.enable_gpio
extern void
xpcc_gpio_enable(void);
%% endif

static void
table_copy(uint32_t **table, uint32_t **end)
{
	while(table < end)
	{
		uint32_t *src  = table[0]; // load address
		uint32_t *dest = table[1]; // destination start
		while (dest < table[2])    // destination end
		{
			*(dest++) = *(src++);
		}
		table += 3;
	}
}

static void
table_zero(uint32_t **table, uint32_t **end)
{
	while(table < end)
	{
		uint32_t *dest = table[0]; // destination start
		while (dest < table[1])    // destination end
		{
			*(dest++) = 0;
		}
		table += 2;
	}
}

// ----------------------------------------------------------------------------
// This is the code that gets called when the processor first starts execution
// following a reset event.  Only the absolutely necessary set is performed,
// after which the application supplied main() routine is called.  Any fancy
// actions (such as making decisions based on the reset cause register, and
// resetting the bits in that register) are left solely in the hands of the
// application.
void
Reset_Handler(void)
{
%# Enables all required internal memories
{{ platform.enableInternalMemory() }}

	// fill the stack with relative branches to __stack_start
	// where the undefined instruction is waiting to trigger the hard fault
	asm volatile (
		"ldr   r0, =__stack_start"      "\n\t"

		"ldr   r1, =0xE7FDDE00"         "\n\t" // b __stack_start, undef. instruction
		"stmia r0!, {r1}"               "\n\t"

		"ldr   r1, =__stack_end+4"      "\n\t"
		"ldr   r2, =0xE7FC"             "\n\t" // the 2's complement offset of -8/2 = -4
		"ldr   r3, =0xE401"             "\n\t" // largest negative relative branch value!

	"1:  strh  r2, [r0]"                "\n\t" // store the 16bit value into ram
		"add   r0, #2"                  "\n\t" // add sizeof(uint16_t) to the pointer

		"cmp   r2, r3"                  "\n\t" // compare value with 0xE401
		"beq   2f"                      "\n\t" // branch forward if equal
		"sub   r2, #1"                  "\n\t" // subtract only if not equal

	"2:  cmp   r0, r1"                  "\n\t" // compare pointer with end of stack address
		"bne   1b"                      "\n\t" // continue loop if not equal
	);

	// copy all internal memory declared in linkerscript table
	table_copy(	(uint32_t**)__table_copy_intern_start,
				(uint32_t**)__table_copy_intern_end);
	table_zero(	(uint32_t**)__table_zero_intern_start,
				(uint32_t**)__table_zero_intern_end);

%% if not (target is cortex_m0 or target is cortex_m7)
	// Enable Tracing Debug Unit
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
	// Enable CPU cycle counter
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
%% endif

%% if target is cortex_m7
	// enable instruction cache
	SCB_EnableICache();
%% endif

%% if target is cortex_m4f or target is cortex_m7f or target is cortex_m7fd
	// Enable FPU in privileged and user mode
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  // set CP10 and CP11 Full Access
%% endif

%% if target is cortex_m3 or target is cortex_m4 or target is cortex_m7
	// Setup NVIC
	// Set vector table
	%% if parameters.vector_table_in_ram
	SCB->VTOR = (uint32_t)(__vector_table_ram_start);
	%% else
	SCB->VTOR = (uint32_t)(__vector_table_rom_start);
	%% endif
	// Enables handlers with priority -1 or -2 to ignore data BusFaults caused by load and store instructions.
	// This applies to the hard fault, NMI, and FAULTMASK escalated handlers.
	// We use this to opportunistically restore LR, PC and xPSR in the hard fault handler.
	// Also enables trapping of divide by zero. Otherwise it would just be ignored.
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk | SCB_CCR_DIV_0_TRP_Msk;

	// Lower priority level for all peripheral interrupts to lowest possible
	for (uint32_t i = 0; i < {{ number_of_interrupts }}; i++) {
		NVIC->IP[i] = 0xff;
	}

	// Set the PRIGROUP[10:8] bits to
	// - 4 bits for pre-emption priority,
	// - 0 bits for subpriority
	NVIC_SetPriorityGrouping(3);

	// Enable fault handlers
	/*SCB->SHCSR |=
			SCB_SHCSR_BUSFAULTENA_Msk |
			SCB_SHCSR_USGFAULTENA_Msk |
			SCB_SHCSR_MEMFAULTENA_Msk;*/
%% else
	%% if parameters.vector_table_in_ram
	// cortex-m0 does not provide the SCB->VTOR register
	#error "Placing the vector table in RAM is not supported on Cortex-M0 targets."
	%% endif
%% endif

%% if parameters.enable_gpio
	// Enable GPIO Clock
	xpcc_gpio_enable();
%% endif

	// Use this hook to initialize external memories
	xpcc_hook_hardware_init();

	// copy all external memory declared in linkerscript table
	table_copy(	(uint32_t**)__table_copy_extern_start,
				(uint32_t**)__table_copy_extern_end);
	table_zero(	(uint32_t**)__table_zero_extern_start,
				(uint32_t**)__table_zero_extern_end);

	// initialize heap
	// needs to be done before calling the CTORS of static objects
	__xpcc_initialize_memory();

	// Call CTORS of static objects
	__libc_init_array();

	// Call the application's entry point
	main();

	xpcc_assert_debug(0, "core", "main", "exit");
	while(1) ;
}
